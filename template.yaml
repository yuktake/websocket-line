AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  image-change-websocket-test
  S3, DynamoDB table, Lambda and Websocket protocol on API Gateway.

Parameters:
  S3BucketName:
    Type: String
  DynamoDBName:
    Type: String
  LINECHANNELACCESSTOKEN:
    Type: String
  RequestsLayerArn:
    Type: String

Resources:
  S3InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3InputBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${S3InputBucket}/*"
            Principal: "*"
    DependsOn:
      - S3InputBucket

  ReceiveImageFromLineFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/sentfromline/
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Runtime: python3.11
      Environment:
        Variables:
          LINE_CHANNEL_ACCESS_TOKEN: !Ref LINECHANNELACCESSTOKEN
          BUCKET_NAME: !Ref S3BucketName
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3BucketName
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /saveImageFromLine
            Method: post
      Layers:
        - !Ref RequestsLayerArn

  SendImageToBrowserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/sendimage/
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Runtime: python3.11
      Environment:
        Variables:
          CONNECTION_TABLE: !Ref DynamoDBName
          IMAGE_S3_BUCKET_NAME: !Ref S3BucketName
          WEBSOCKET_ENDPOINT_URL: !Join [ '', [ 'https://', !Ref ApiGatewayWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoDBName
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayWebSocket}/*'
      Events:
        S3PutEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3InputBucket
            Events: s3:ObjectCreated:Put

  # Lambda関数のPermissionを明示的に追加
  # これを書かないとLambdaのコンソール画面にS3のトリガーが表示されない
  SendImageToBrowserFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt SendImageToBrowserFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt S3InputBucket.Arn

  ApiGatewayWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: wsApiTest
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref ApiGatewayWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref ApiGatewayWebSocket

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connection_id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connection_id"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref DynamoDBName

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/onconnect/
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Runtime: python3.11
      Environment:
        Variables:
          CONNECTION_TABLE: !Ref ConnectionsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionsTable

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGatewayWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ondisconnect/
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Runtime: python3.11
      Environment:
        Variables:
          CONNECTION_TABLE: !Ref ConnectionsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionsTable

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGatewayWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com